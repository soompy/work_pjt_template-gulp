@charset "utf-8";
// ============================================================ 
// _variables.scss 
// 2020.12.21
// ============================================================ 


// Vertically centers the element inside of its first non-static parent,
// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin vertical-center {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

/// Horizontally centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

/// Absolutely centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// border-radius | //하하하
// @param : $radius ( 기본값 50% ) 
@mixin border-radius($radius:50%) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    -o-border-radius: $radius;
    border-radius: $radius;
}

// border 
// @param : $width  
// @param : $color ( 기본값 red ) 
@mixin border($width , $color:red) {
    border:$width solid $color;
}

// text-ellipsis (말줄임..) 
// @param : $line ( 기본값 1 줄 )
@mixin ellipsis($line: 1) {
    @if ($line == 1) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    } @else { 
        display: -webkit-box;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: $line;
    }
}

// clearfix (float 된 요소를 clear) 
@mixin clearfix {
    *zoom: 1;
    &:before, &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

/*
 ** Prefix CSS3 Properties
 ** Accept Arguments => Property Name, Property Values, Vendor Prefixes
 ** Example: @include prefixer(transition, all .3s ease, webkit moz o)
 */

@mixin prefixer($property, $value, $prefixes: ()) {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }
    #{$property}: $value;
}

/*
 ** Opacity Mixin For All Browsers
 ** Accept Argument => Property Value
 ** Example: @include opacity(.5)
*/
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

/*
 ** Opacity Mixin For All Browsers
 ** Accept Argument => Property Value
 ** Example: @include box-sizing()
*/
@mixin box-sizing($box-model) {
    -webkit-box-sizing: $box-model; // Safari <= 5
    -moz-box-sizing: $box-model; // Firefox <= 19
    box-sizing: $box-model;
}

@mixin box-shadow( $horiz : .5em , $vert : .5em , $blur : 0px , $spread : 0px , $color : #000000 ) {
    -webkit-box-shadow: $horiz $vert $blur $spread $color;
    -moz-box-shadow: $horiz $vert $blur $spread $color;
    box-shadow: $horiz $vert $blur $spread $color;
}

/*
 ** Overlay Mixin
 ** Accept Argument => Color
 ** Example: @include overlay(black, .5);
 */

@mixin overlay($color, $opacity) {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba($color, $opacity);
}

/*
 ** Center Element Horizontally and Vertically
 ** Accept No Arguments
 ** Example: @include centerer();
 */

@mixin centerer() {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefixer(transform, translate(-50%, -50%), webkit moz o);
}

/*
 ** Circle Mixin
 ** Accept Argument => Dimensions
 ** Example: @include circle(100px);
 */

@mixin circle($dimension) {
    width: $dimension;
    height: $dimension;
    border-radius: 50%;
}




// get-vw(30px )
// get-vw(30px , 720)
@function get-vw($font , $vw-viewport : 1024){
  $vw-context: $vw-viewport * 0.01 * 1px;
  @return $font / $vw-context * 1vw;
  @return $font;
}
// t-vw tablet
@function t-vw($font , $vw-viewport : 1024){
    $vw-context: $vw-viewport * 0.01 * 1px;
    @return $font / $vw-context * 1vw;
    @return $font;
}
// m-vw mobile
@function m-vw($font , $vw-viewport : 720){
    $vw-context: $vw-viewport * 0.01 * 1px;
    @return $font / $vw-context * 1vw;
    @return $font;
}

// @include border(1px , solid , red);
@mixin border($size:1px , $type:solid , $color:#000) {
    border:$size $type $color;
}

